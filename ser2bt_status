#!/usr/bin/python3
# -*- coding:utf-8 -*-
import sys
import os
import socket
import fcntl
import struct
picdir = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), 'pic')
libdir = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), 'lib')
if os.path.exists(libdir):
    sys.path.append(libdir)

from waveshare_epd import epd2in13_V2
import time
from PIL import Image,ImageDraw,ImageFont
import traceback
import subprocess
import netifaces
import re
import smbus
import psutil
import logging

#Variable decleration:
host_name = socket.gethostname() #define host_name
bus = smbus.SMBus(1)  # 0 = /dev/i2c-0 (port I2C0), 1 = /dev/i2c-1 (port I2C1)
min_bat_cap = 2 # setting minimum battery capacity before we'll shutdown.

def get_ssid():
    ps = subprocess.Popen(['iwgetid'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    try:
       output = subprocess.check_output(('grep', 'ESSID'), stdin=ps.stdout)
    except subprocess.CalledProcessError:
       # grep did not match any lines
       ssid = "Not Connected"
       return (ssid)
    output_ssid = output.decode(encoding='UTF-8')
    ssid = re.sub("wlan0 +[A-z]+:\"","", output_ssid)
    ssid = re.sub("\"","", ssid)
    return (ssid)

def readCapacity(bus):
#     "This function returns as a float the remaining capacity of the battery connected to the Raspi UPS Hat via the pro$
     address = 0x36
     read = bus.read_word_data(address, 4)
     swapped = struct.unpack("<H", struct.pack(">H", read))[0]
     capacity = swapped/256
     return capacity

try:
    epd = epd2in13_V2.EPD()
    epd.init(epd.FULL_UPDATE)
    epd.Clear(0xFF)

    # Drawing on the image
    f_title_font16 = ImageFont.truetype("/usr/share/fonts/truetype/roboto/unhinted/RobotoTTF/Roboto-Bold.ttf",16)
    f_var_spc_char_font16 = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf",16)
    f_title_font24 = ImageFont.truetype("/usr/share/fonts/truetype/roboto/unhinted/RobotoTTF/Roboto-Medium.ttf",24)
    f_var_font16 = ImageFont.truetype("/usr/share/fonts/truetype/roboto/unhinted/RobotoTTF/Roboto-Medium.ttf",16)
    f_top_line_font16 = ImageFont.truetype("/usr/share/fonts/truetype/roboto/unhinted/RobotoTTF/Roboto-Medium.ttf",16)

    image = Image.new('1', (epd.height, epd.width), 255)  # 255: clear the frame
    draw = ImageDraw.Draw(image)

    time.sleep(0.25)
    draw.text((0, 0), host_name, font = f_top_line_font16, fill = 0)
    draw.line([(0, 17),(250, 17)], fill = 0,width = 2)
    draw.text((0, 20), 'Load:', font = f_title_font16, fill = 0)
    draw.text((0, 40), 'SSID:', font = f_title_font16, fill = 0)
    draw.text((0, 60), 'IP Address:', font = f_title_font16, fill = 0)
    draw.text((0, 80), 'Services:', font = f_title_font16, fill = 0)
    draw.text((0, 100), 'TTYs:', font = f_title_font16, fill = 0)
    epd.display(epd.getbuffer(image))

    time.sleep(0.25)
    num = 0
    bat_cap = int(readCapacity(bus))
    while (bat_cap > min_bat_cap):
        #update status:
        time.sleep(0.25)
        try:
           iface = netifaces.gateways()['default'][netifaces.AF_INET][1]
        except:
           iface = "NA"
        if iface != "NA":
           host_ip = netifaces.ifaddresses(iface)[netifaces.AF_INET][0]['addr']
        else:
           host_ip = "Not Connected" 
        time.sleep(0.25)
        bt_service_status = subprocess.Popen(['systemctl', 'is-active', 'rfcomm'], stdout=subprocess.PIPE).communicate()[0]
        bt_string_status = bt_service_status.decode(encoding='UTF-8')

        ser2net_service_status = subprocess.Popen(['systemctl', 'is-active', 'ser2net'], stdout=subprocess.PIPE).communicate()[0]
        ser2net_string_status = ser2net_service_status.decode(encoding='UTF-8')

        time.sleep(0.15)
        if "inactive" in bt_string_status:
           bt_status = "↓" # down arrow
        else:
           bt_status = "↑" # up arrow

        if "inactive" in ser2net_string_status:
           ser2net_status = "↓" # down arrow
        else:
           ser2net_status = "↑" # up arrow

        time.sleep(0.15)
        if os.path.exists("/dev/ttyUSB0"):
           wired_serial_port = "USB0"
        elif os.path.exists("/dev/ttyACM0"):
           wired_serial_port = "ACM0"
        else:
           wired_serial_port = "None"

        time.sleep(0.15)
        if os.path.exists("/dev/rfcomm0"):
           bt_serial_port = "rfcomm0"
        else:
           bt_serial_port = "None"
        time.sleep(0.15)
        if bt_serial_port == "None" and wired_serial_port == "None":
           bt_serial_status = "✖"
           wired_serial_status = "✖"
           full_tty_status = "No tty connections"
           full_tty_presence_flag = False # Nothing connected to any of the ttys
        elif bt_serial_port != "None" and wired_serial_port == "None":
           bt_serial_status = "✔"
           wired_serial_status = "✖"
           full_tty_status = ""
           full_tty_presence_flag = True # Something is connected to any of the ttys
        elif bt_serial_port == "None" and wired_serial_port != "None":
           bt_serial_status = "✖"
           wired_serial_status = "✔"
           full_tty_status = ""
           full_tty_presence_flag = True # Something is connected to any of the ttys
        elif bt_serial_port != "None" and wired_serial_port != "None":
           bt_serial_status = "✔"
           wired_serial_status = "✔"
           full_tty_status = ""
           full_tty_presence_flag = True # Something is connected to any of the ttys

        time.sleep(0.15)
        pi_ssid = get_ssid()
        bat_cap = int(readCapacity(bus))
        bat_lvl = "Bat:"+str(bat_cap)+"%"
        p = str(psutil.cpu_percent())+"%"
        svmem = psutil.virtual_memory()
        mem = str(svmem.percent)+"%"

        time.sleep(0.15)
        epd.displayPartBaseImage(epd.getbuffer(image))
        epd.init(epd.PART_UPDATE)
        draw.rectangle((60, 0, 132, 15), fill = 255)
        draw.text((60, 0), bat_lvl, font = f_top_line_font16, fill = 0)
        time.sleep(0.15)
        draw.rectangle((133, 0, 250, 15), fill = 255)
        draw.text((133, 0), time.strftime('%D %H:%M'), font = f_top_line_font16, fill = 0) 
        time.sleep(0.15)
        draw.rectangle((83, 20, 250, 37), fill = 255)
        draw.text((48, 20), "CPU", font = f_var_font16, fill = 0)
        draw.text((83, 20), p, font = f_var_font16, fill = 0)
        draw.text((145, 20), "Mem", font = f_var_font16, fill = 0)
        draw.text((185, 20), mem, font = f_var_font16, fill = 0)
        time.sleep(0.15)
        draw.rectangle((46, 40, 250, 57), fill = 255)
        draw.text((46, 40), pi_ssid, font = f_var_font16, fill = 0)
        time.sleep(0.15)
        draw.rectangle((88, 60, 250, 77), fill = 255)
        draw.text((88, 60), host_ip, font = f_var_font16, fill = 0)
        time.sleep(0.15)
        draw.rectangle((73, 80, 104, 97), fill = 255)
        draw.text((73, 80), 'BT', font = f_var_font16, fill = 0)
        draw.text((93, 80), bt_status, font = f_var_spc_char_font16, fill = 0)
        draw.rectangle((105, 80, 250, 97), fill = 255)
        draw.text((110, 80), 'ser2net', font = f_var_font16, fill = 0)
        draw.text((168, 80), ser2net_status, font = f_var_spc_char_font16, fill = 0)
        time.sleep(0.15)
        #setting up the dynamic parts of tty status
        #first, if nothing is connected, then just say that:
        draw.rectangle((49, 100, 250, 117), fill = 255)
        if full_tty_presence_flag  == False:
           draw.text((49, 100), full_tty_status, font = f_var_font16, fill = 0)
           time.sleep(0.15)
        else:
           draw.text((49, 100), bt_serial_port, font = f_var_font16, fill = 0)
           draw.text((122, 100), bt_serial_status, font = f_var_spc_char_font16, fill = 0)
           draw.text((145, 100), wired_serial_port, font = f_var_font16, fill = 0)
           draw.text((190, 100), wired_serial_status, font = f_var_spc_char_font16, fill = 0)
           time.sleep(0.15)
        epd.displayPartial(epd.getbuffer(image))
        num = num + 1
        time.sleep(0.25)
#End of while bat_cap > 2 loop...
#After the loop closes due to the battery reaching minimum capacity, we'll follow the remaining code - to shutdown.
    term_image = Image.new('1', (epd.height, epd.width), 255)  # 255: clear the frame
    term_draw = ImageDraw.Draw(term_image)
    epd.init(epd.FULL_UPDATE)
    epd.Clear(0xFF)
    term_draw.text((30, 50), 'Shutting Down!', font = f_title_font24, fill = 0)
    term_draw.text((20, 80), 'Due to Critical Battary level', font = f_title_font16, fill = 0)
    logging.info ("Shutting down has battary has reached critical level")
    logging.info ("Battary is: "+str(bat_cap)+"%")
    epd.display(epd.getbuffer(term_image))
    epd2in13_V2.epdconfig.module_exit()
    os.system("shutdown -P now")
    exit()

#except (KeyboardInterrupt, SystemExit):
except:
    term_image = Image.new('1', (epd.height, epd.width), 255)  # 255: clear the frame
    print ("application is closeing\n")
    term_draw = ImageDraw.Draw(term_image)
    epd.init(epd.FULL_UPDATE)
    epd.Clear(0xFF)
    term_draw.text((8, 50), 'Exiting ser2bt_status', font = f_title_font24, fill = 0)
    term_draw.text((35, 80), 'Due to Quit (SIGTERM)', font = f_title_font16, fill = 0)
    epd.display(epd.getbuffer(term_image))
    epd2in13_V2.epdconfig.module_exit()
    exit()
