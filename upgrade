#!/bin/bash

#color and other formatting defenitions:
if [ -f /usr/local/lib/format.sh ]; then
	source /usr/local/lib/format.sh > /dev/null
else
	printf "\nformat library is not installed, continueing without!\n"
fi

#Location settings:
home="/home/${SUDO_USER}/"
etc_folder="/etc/"
lib_folder="/lib/"
project_folder="${home}Projects/ser2bt-bridge/"
support_folder="${home}Projects/support/"
logging_folder="${home}console_logs/"
bin_folder="/usr/local/bin/"
main_lib_folder="/usr/local/lib/"
ser2bt_lib_folder="${main_lib_folder}er2bt-bridge/"
etc_service_folder="${etc_folder}systemd/system/"
lib_service_folder="${lib_folder}systemd/system/"
serial_fix_folder="${etc_service_folder}getty@ttyGS0.service.d/"

#File list:
bt_service="bluetooth.service"
base_bin_files=(ser2bt_bridge)
enhanc_bin_files=(ser2bt_status init_scr shutdown_scr)
full_bin_files=( "${base_bin_files[@]}" "${enhanc_bin_files[@]}" )
base_lib_files=(format.sh)
enhanc_lib_files=(logo.bmp)
full_lib_files=( "${base_lib_files[@]}" "${enhanc_lib_files[@]}" )
etc_files=(ser2bt_bridge.screenrc)
base_service_files=(rfcomm.service)
enhanc_service_files=(ser2bt-e-paper.service ser2bt-e-paper-init.service ser2bt-e-paper-shut.service)
full_service_files=( "${base_service_files[@]}" "${enhanc_service_files[@]}" )
enhanc_service_assoc=(ser2bt_status ser2bt-e-paper.service)
full_service_assoc=( "${enhanc_service_assoc[@]}" )
begin_bashrc_addon_mark="#BEGIN ser2b-bridge .bashrc add-in"
end_bashrc_addon_mark="#END ser2b-bridge .bashrc add-in"
serial_fix_file="override.conf"
serial_fix_file_content="[Service]\nTTYReset=no\nTTYVHangup=no\nTTYVTDisallocate=no"
bt_service_pre_search="ExecStart=/usr/lib/bluetooth/bluetoothd"
bt_service_content="ExecStart=/usr/lib/bluetooth/bluetoothd -C --noplugin=sap\nExecStartPost=/usr/bin/sdptool add SP\nExecStartPost=/bin/hciconfig hci0 piscan"

#Flags
bin_flag=0
serial_fix_flag=0
bt_fix_flag=0


#Checks before begining:
# Make sure the script is run with superuser privelages
if [[ "${UID}" -ne 0 ]]; then
	printf "\n${nor}You do ${drk_red}not ${nor}have the permissions to successfully run this script.\n"
	exit 1
fi

#check for minimum arguements:
if [[ "${#}" -lt 1 ]]; then
	printf "${nor}Usage: sudo ${0} UPGRADE_OPTION [basic|battery|sceen|fukk].\n\n"
	printf "Upgrade ${yel}ser2bt-bridge${nor}, with the following options:\n"
	printf "\tbasic - Basic istallation of the serial to Bluetooth scripts.\n"
	printf "\tbattery -  Basic istallation of the serial to Bluetooth scripts, plus battery support.\n"
	printf "\tscreen -  Basic istallation of the serial to Bluetooth scripts, plus e-ink screen support.\n"
	printf "\tfull -  Basic istallation of the serial to Bluetooth scripts, plus e-ink screen and battery support.\n\n"
	exit 2
fi

#assign the upgrade path to the first argument
	upgrade_path="${1}"
	shift
	if [ "${upgrade_path}" = "basic" ] ; then
		bin_files=( "${base_bin_files[@]}" )
		lib_files=( "${base_lib_files[@]}" )
		service_files=( "${base_service_files[@]}" )
	fi

	if [ "${upgrade_path}" = "enhanced" ] ; then
		bin_files=(${enhanc_bin_files[@]})
		lib_files=(${enhanc_lib_files[@]})
		service_files=(${enhanc_service_files[@]})
		service_assoc=(${enhanc_service_assoc[@]})
	fi

	if [ "${upgrade_path}" = "full" ] ; then
		bin_files=(${full_bin_files[@]})
		lib_files=(${full_lib_files[@]})
		service_files=(${full_service_files[@]})
		service_assoc=(${full_service_assoc[@]})
	fi

##Check to make sure this is a rpi zero:
if  grep -q "Zero" /proc/device-tree/model; then
#Starting script here:
	printf "\n\n${nor}Beginning ${upgrade_path} upgrade of ${yel}ser2bt-bridge${nor}:\n\n"

#checking and adding modules as needed into /etc/modules:
	printf "${nor}Check to make sure the the relevent modules are loaded:\n"
	grep -q -s -e "^g_serial" /etc/modules && (printf " ${nor}module ${drk_grn}already${nor} loaded\n") || (sudo bash -c "echo 'g_serial' >> /etc/modules"; printf " ${nor}module ${drk_grn}successfully${nor} loaded\n")
	grep -q -s -e "^dwc2" /etc/modules && (printf " ${nor}module ${drk_grn}already${nor} loaded\n") || (sudo bash -c "echo 'dwc2' >> /etc/modules"; printf " ${nor}module ${drk_grn}already${nor} loaded\n")

#checking and adding modules as needed into /boot/config.txt and /boot/cmdline.txt:
#	printf "${nor}Check to make sure the the relevent modules are loaded in the boot files:\n"
#sed -i -e 's/#/maxmemory 26gb/g' /etc/redis/redis.conf

#Upgrade system files
#printf "\r${nor}Update package manager:\n"
#apt update > /dev/null 2>&1
#if [ ${?} -gt 0 ]; then
#	printf "${red}Update failed, exiting to shell\n"
#	exit 1 #apt update or apt full-upgrade failed"
#fi
#apt full-upgrade -y > /dev/null 2>&1
#if [ ${?} -gt 0 ]; then
#	printf "${red}Upgrade failed, exiting to shell\n"
#	exit 1 #apt update or apt full-upgrade failed"
#fi

#make directorys:
#Make directory for serial port fix, then verify the config file is correct, if not, make corrections:
	printf "\n${nor}Check to make sure the ${cyn}${serial_fix_folder} ${nor}directories exist:\n"
	if [ ! -d ${serial_fix_folder} ]; then
		printf " ${nor}Directory does ${drk_red}not ${nor}exist, creating...\n"
		mkdir -p ${serial_fix_folder}
	else
		printf " ${nor}Directory ${drk_grn}already ${nor}exist, moving on.\n"
	fi
	if [ ! -f ${serial_fix_folder}${serial_fix_file} ]; then
		official_s_ver=$(echo -e ${serial_fix_file_content})
		printf " ${nor}File does ${drk_red}not${nor}exist, creating..."
		echo -e ${official_s_ver} > ${serial_fix_folder}${serial_fix_file} && printf " ${drk_grn}Done${nor}.\n" || printf " ${drk_grn}Failed${nor}.\n"
	else
		printf " ${nor}File ${drk_green}does${nor} exist, checking if updates are needed:\n"
		existing_s_ver=$(cat ${serial_fix_folder}${serial_fix_file})
		if [ "${existing_s_ver}" != "${official_s_ver}" ] ; then
			printf "  ${nor}There is a difference between what is supposed to be in the ${yel}fix${nor}, will clean and re-apply ${yel}fix${nor} related configurations:\n"
			echo -e ${official_s_ver} > ${serial_fix_folder}${serial_fix_file} && printf " ${drk_grn}Done${nor}.\n" || printf " ${drk_grn}Failed${nor}.\n"
			serial_fix_flag=1
		else
			printf "  ${nor}Both versions are the same, skipping...\n"
			serial_fix_flag=0
		fi
	fi

#Modify/Ammend the bluetooth/bluez service file:
printf "\n${blu}Bluetooth${nor} service configurations:\n"
if [ -f "${lib_service_folder}${bt_service}" ]; then
	existing_bt_chg=$(awk '/^ExecStart/,/piscan/ { print }' ${lib_service_folder}${bt_service})
	printf " ${blu}Bluetooth${nor} Service ${drk_grn}was${nor} found, checking content:\n"
	if grep -q -e "^${bt_service_pre_search}$" "${lib_service_folder}${bt_service}"; then
		printf "  ${blu}Bluetooth${nor} Service ${drk_yel}needs${nor} to be edited..."
		sed -i "s+${bt_service_pre_search}+${bt_service_content}+g" "${lib_service_folder}${bt_service}" && printf "${drk_grn}Done${nor}\n" || printf "\n"
		bt_fix_flag=1
	elif [[ $(printf "${existing_bt_chg}") == $(printf "${bt_service_content}") ]]; then
#grep -e "^${bt_service_content}$" "${lib_service_folder}${bt_service}"; then
		printf "  ${blu}Bluetooth${nor} Service does ${drk_grn}not need${nor} to be edited..."
		bt_fix_flag=0
	else
		printf "  ${drk_red}Error${nor} fatal error, unable to overcome problem in ${yel}${lib_service_folder}${bt_service}${nor}.  Please manually fix\n."
		bt_fix_flag=0
		exit 4
	fi
else
	printf " ${blu}Bluetooth${nor} Service could ${drk_red}not ${nor}be found, ${drk_red}Aborting${nor}.\n"
	bt_fix_flag=0
	exit 3
fi

#Build support folde(s) and copy files to them:
	printf "\n${nor}Check to make sure the ${cyn}${support_folder} ${nor}directories exist:\n"
	if [ ! -d ${support_folder} ]; then
		printf " ${nor}Directory does ${drk_red}not ${nor}exist, creating...\n"
		mkdir -p ${support_folder}
	else
		printf " ${nor}Directory ${drk_grn}already ${nor}exist, moving on.\n"
	fi

	printf "\n${nor}check to make sure the ${cyn}${logging_folder} ${nor}directories exist:\n"
	if [ ! -d ${logging_folder} ]; then
		printf " ${nor}Directory does ${drk_red}not ${nor}exist, creating...\n"
		mkdir -p ${logging_folder}
	else
		printf " ${nor}Directory ${drk_grn}already ${nor}exist, moving on.\n"
	fi

#copy files to proper directories:
	printf "\nCopying files to the ${cyn}${bin_folder} ${nor}directory:\n"
	for file in "${bin_files[@]}" ; do
#		printf "${service_assoc[1]}\n"
		if cmp --silent "${bin_folder}${file}" "${project_folder}${file}" ; then
			printf " ${nor}Both versions of ${yel}${file} ${nor}are the same, Skipping...\n"
		else
			if [ "${file}" == "${service_assoc[0]}" ] ; then
				bin_flag=1
			fi
			cp ${project_folder}${file} ${bin_folder} && printf " ${yel}${file} ${nor}copied.\n" || break
		fi
	done

	printf "\nCopying files to the ${cyn}${main_lib_folder} ${nor}directory:\n"
	for file in "${lib_files[@]}" ; do
		if cmp --silent "${main_lib_folder}${file}" "${project_folder}${file}" ; then
			printf " ${nor}Both versions of ${yel}${file} ${nor}are the same, Skipping...\n"
		else
			cp ${project_folder}${file} ${main_lib_folder} && printf " ${yel}${file} ${nor}copied.\n" || break
		fi
	done

	printf "\nCopying files to the ${cyn}${etc_folder} ${nor}directory:\n"
	for file in "${etc_files[@]}" ; do
		if cmp --silent "${etc_folder}${file}" "${project_folder}${file}" ; then
			printf " ${nor}Both versions of ${yel}${file} ${nor}are the same, Skipping...\n"
		else
			cp ${project_folder}${file} ${etc_folder} && printf " ${yel}${file} ${nor}copied.\n" || break
		fi
	done

	printf "\nCopy service files to the ${cyn}${etc_service_folder} ${nor}directory, then disable and enable copied services:\n"
	svc_count=0
	for svc_file in ${service_files[@]} ; do
		if cmp --silent "${etc_service_folder}${svc_file}" "${project_folder}${svc_file}" ; then
			printf " ${nor}Both versions of ${yel}${svc_file} ${nor}are the same, Skipping...\n"
			let svc_count++
		else
			cp ${project_folder}${svc_file} ${etc_service_folder} && printf " ${yel}${svc_file} ${nor}copied.\n" || break
			systemctl disable ${svc_file} && printf " ${nor}${svc_file} ${drk_grn}successfully ${nor}disabeled.\n" || break
			systemctl enable ${svc_file} && printf " ${nor}${svc_file} ${drk_grn}successfully ${nor}enabeled.\n" || break
		fi
	done

#Action based on flags:
	if [[ "${bt_fix_flag}" -gt 0 ]] ; then
		printf "\n${nor}Disabeling, Enabeling and Starting ${bt_service}${nor}:\n"
		systemctl disable ${bt_service} > /dev/null && printf " ${nor}${bt_service} ${drk_grn}successfully ${nor}disabeled.\n" || printf "Failed\n"
		systemctl enable ${bt_service} > /dev/null && printf " ${nor}${bt_service} ${drk_grn}successfully ${nor}enabled.\n" || printf "Failed\n"
		systemctl start ${bt_service} > /dev/null && printf " ${nor}${bt_service} ${drk_grn}successfully ${nor}started.\n" ||  printf "Failed\n"
		let svc_count++
	fi

	if [[ "${serial_fix_flag}" -gt 0 ]] ; then
#		if [ $(systemctl status getty@ttyGS0.service | grep -o "inactive") ]; then
			printf "\n${nor}Enabeling and starting getty@ttyGS0.service:${nor}\n"
			systemctl enable getty@ttyGS0.service && printf " ${nor}getty@ttyGS0.service ${drk_grn}successfully ${nor}enabled.\n" || break
			systemctl start getty@ttyGS0.service && printf " ${nor}getty@ttyGS0.service ${drk_grn}successfully ${nor}started.\n" || break
			let svc_count++
#		fi
	fi

	if [[ "${bin_flag}" -gt 0 ]] ; then
		printf "\n${nor}Restarting ${service_assoc[1]} (as needed):${nor}\n"
		systemctl restart "${service_assoc[1]}" && printf " ${nor}e-paper service ${drk_grn}Successfully ${nor}Restarted.\n" || printf "${drk_red}Failed ${yellow}${svc_file}${nor}!\n"
		let svc_count++
	fi

	if [ ${svc_count} != ${#service_files[@]} ] || [[ "${bin_flag}" -gt 0 ]] ; then
		printf "\n${nor}Restarting systemctl (as needed):${nor}\n"
		systemctl daemon-reload && printf " ${yel}systemctl daemon-reload${nor} was ${drk_grn}Successfull${nor}.\n" || printf " ${nor}systemctl daemon-reload was ${drk_red}not ${nor}successfull.\n"
	fi

#refreshing .bashrc:
	printf "\nAdding the ${yel}.bashrc${nor} addon (if it's already on, it will be removed and replaced):\n"
#First compare whats in bashrc matches the addendum:
	existing_ver=$(awk '/^#BEGIN/,/^#END/ { print }' ${home}.bashrc)
	official_ver=$(awk '/^#BEGIN/,/^#END/ { print }' ${project_folder}bashrc_addendum.sh)
	if [ "${existing_ver}" != "${official_ver}" ] ; then
		printf " ${nor}There is a difference between what is supposed to be in ${yel}.bashrc${nor}, will clean and re-apply ${yel}ser2bt-bridge${nor} related configurations:\n" 
		sed -i '/^#BEGIN ser2b-bridge .bashrc add-in/, /^#END ser2b-bridge .bashrc add-in/d' ${home}.bashrc
		cat bashrc_addendum.sh >> ${home}.bashrc && printf " ${drk_grn}Done${nor}.\n" || printf " ${drk_grn}Failed${nor}.\n"
	else
		printf " ${nor}Both versions are the same, skipping...\n"
	fi
else
	printf "\n${nor}This is ${drk_red}not${nor} a ${yel}Raspberry Zero${nor}, ${drk_red}Aborting ${nor}installation/upgrade.\n"
fi
exit 0
