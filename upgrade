#!/bin/bash

#color and other formatting defenitions:
source /usr/local/lib/format.sh

#Location settings:
home="/home/${SUDO_USER}"
project_folder="${home}/Projects/ser2bt-bridge/"
support_folder="${home}/Projects/support/"
logging_folder="${home}/console_logs/"
bin_folder="/usr/local/bin/"
lib_folder="/usr/local/lib/"
etc_folder="/etc/"
service_folder="/etc/systemd/system/"

#File list:
base_bin_files=(ser2bt_bridge)
base_lib_files=(format.sh)
base_service_files=(rfcomm.service)
etc_files=(ser2bt_bridge.screenrc)

#Checks before begining:
# Make sure the script is run with superuser privelages
if [[ ${UID} -ne 0 ]]; then
	printf "\n${nor}You do ${drk_red}not ${nor}have the permissions to successfully run this script.\n"
	exit 1
fi

#Starting script here:

#Upgrade system files
#printf "${white}Update package manager:\n"
#apt update > /dev/null 2>&1
#if [ ${?} -gt 0 ]; then
#	printf "${red}Update failed, exiting to shell\n"
#	exit 1 #apt update or apt full-upgrade failed"
#fi
#apt full-upgrade -y > /dev/null 2>&1
#if [ ${?} -gt 0 ]; then
#	printf "${red}Upgrade failed, exiting to shell\n"
#	exit 1 #apt update or apt full-upgrade failed"
#fi

#make directorys:
printf "${nor}Check to make sure the ${cyn}${support_folder} ${nor}directories exist\n"
if [ ! -d ${support_folder} ]; then
	printf " ${nor}Directory does ${drk_red}not ${nor}exist, creating...\n"
	mkdir -p ${support_folder}
else
	printf " ${nor}Directory ${drk_grn}already ${nor}exist, moving on.\n"
fi

printf "\n${nor}check to make sure the ${cyn}${logging_folder} ${nor}directories exist\n"
if [ ! -d ${logging_folder} ]; then
	printf " ${nor}Directory does ${drk_red}not ${nor}exist, creating...\n"
	mkdir -p ${logging_folder}
else
	printf " ${nor}Directory ${drk_grn}already ${nor}exist, moving on.\n"
fi

#copy files to proper directories:
printf "\nCopying files to the ${cyn}${bin_folder} ${nor}directory:\n"
brk=0
	for file in ${base_bin_files[@]} ; do
		if cmp --silent "${bin_folder}${file}" "${project_folder}${file}" ; then
			printf " ${nor}Both versions of ${yel}${file} ${nor}are the same, Skipping...\n"
		else
			cp ${project_folder}${file} ${bin_folder} && printf "${yel}${file} ${nor}copied." || break
		fi
	done

	printf "\nCopying files to the ${cyn}${lib_folder} ${nor}directory:\n"
	for file in ${base_lib_files[@]} ; do
		if cmp --silent "${lib_folder}${file}" "${project_folder}${file}" ; then
			printf " ${nor}Both versions of ${yel}${file} ${nor}are the same, Skipping...\n"
		else
			cp ${project_folder}${file} ${lib_folder} && printf "${yel}${file} ${nor}copied.\n" || break
		fi
	done

	printf "\nCopying files to the ${cyn}${etc_folder} ${nor}directory:\n"
	for file in ${etc_files[@]} ; do
		if cmp --silent "${etc_folder}${file}" "${project_folder}${file}" ; then
			printf " ${nor}Both versions of ${yel}${file} ${nor}are the same, Skipping...\n"
		else
			cp ${project_folder}${file} ${etc_folder} && printf "${yel}${file} ${nor}copied.\n" || break
		fi
	done

	printf "\nCopy service files to the ${cyn}${service_folder} ${nor}directory, then resetting copied services:\n"
	svc_count=0
	for file in ${base_service_files[@]} ; do
		if cmp --silent "${service_folder}${file}" "${project_folder}${file}" ; then
			printf " ${nor}Both versions of ${yel}${file} ${nor}are the same, Skipping...\n"
			let svc_count++
		else
			cp ${project_folder}${file} ${service_folder} && printf "${yel}${file} ${nor}copied.\n" || break
			systemctl disable ${file} && echo SUCCESS || break
			systemctl enable ${file} && echo SUCCESS || break
		fi
	done
	if [ $svc_count} == ${#base_service_files[@]} ] ; then
		systemctl daemon-reload && printf "${nor}systemctl daemon-reload was ${drk_grn}Successfull${nor}." || printf "${nor}systemctl daemon-reload was ${drk_red}not ${nor}successfull."
	fi
exit 0
