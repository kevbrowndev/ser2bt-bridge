#!/bin/bash

#color and other formatting defenitions:
source /usr/local/lib/format.sh

#Location settings:
home="/home/${SUDO_USER}"
project_folder="${home}/Projects/ser2bt-bridge/"
support_folder="${home}/Projects/support/"
logging_folder="${home}/console_logs/"
bin_folder="/usr/local/bin/"
lib_folder="/usr/local/lib/"
etc_folder="/etc/"
service_folder="/etc/systemd/system/"

#File list:
base_bin_files=(ser2bt_bridge)
enhanc_bin_files=(ser2bt_status init_scr shutdown_scr)
full_bin_files=( "${base_bin_files[@]}" "${enhanc_bin_files[@]}" )
base_lib_files=(format.sh)
enhanc_lib_files=(logo.bmp)
full_lib_files=( "${base_lib_files[@]}" "${enhanc_lib_files[@]}" )
etc_files=(ser2bt_bridge.screenrc)
base_service_files=(rfcomm.service)
enhanc_service_files=(ser2bt-e-paper.service ser2bt-e-paper-init.service ser2bt-e-paper-shut.service)
full_service_files=( "${base_service_files[@]}" "${enhanc_service_files[@]}" )
begin_bashrc_addon_string="#Add the following at the end to each user"
#Checks before begining:
# Make sure the script is run with superuser privelages
if [[ ${UID} -ne 0 ]]; then
	printf "\n${nor}You do ${drk_red}not ${nor}have the permissions to successfully run this script.\n"
	exit 1
fi

#check for minimum arguements:
if [[ "${#}" -lt 1 ]]; then
	echo "Usage: ${0} UPGRADE_PATH [BASIC|ENHANCED|FULL]."
	echo "Upgrade ser2bt-bridge, and choose either basic, enhanced, or full."
	exit 2
fi
#assign the upgrade path to the first argument
upgrade_path="${1}"
shift

#Starting script here:
printf "\n\n${nor}Beginning ${upgrade_path} upgrade of ${yel}ser2bt-bridge${nor}:\n"

#Upgrade system files
#printf "${nor}Update package manager:\n"
#apt update > /dev/null 2>&1
#if [ ${?} -gt 0 ]; then
#	printf "${red}Update failed, exiting to shell\n"
#	exit 1 #apt update or apt full-upgrade failed"
#fi
#apt full-upgrade -y > /dev/null 2>&1
#if [ ${?} -gt 0 ]; then
#	printf "${red}Upgrade failed, exiting to shell\n"
#	exit 1 #apt update or apt full-upgrade failed"
#fi

if [ "${upgrade_path}" = "basic" ] ; then
	bin_files=${base_bin_files[@]}
	lib_files=${base_lib_files[@]}
	service_files=${base_service_files[@]}
fi

if [ "${upgrade_path}" = "enhanced" ] ; then
	bin_files=${enhanc_bin_files[@]}
	lib_files=${enhanc_lib_files[@]}
	service_files=${enhanc_service_files[@]}
fi

if [ "${upgrade_path}" = "full" ] ; then
	bin_files=${full_bin_files[@]}
	lib_files=${full_lib_files[@]}
	service_files=${full_service_files[@]}
fi

#make directorys:
	printf "${nor}Check to make sure the ${cyn}${support_folder} ${nor}directories exist:\n"
	if [ ! -d ${support_folder} ]; then
		printf " ${nor}Directory does ${drk_red}not ${nor}exist, creating...\n"
		mkdir -p ${support_folder}
	else
		printf " ${nor}Directory ${drk_grn}already ${nor}exist, moving on.\n"
	fi

	printf "\n${nor}check to make sure the ${cyn}${logging_folder} ${nor}directories exist:\n"
	if [ ! -d ${logging_folder} ]; then
		printf " ${nor}Directory does ${drk_red}not ${nor}exist, creating...\n"
		mkdir -p ${logging_folder}
	else
		printf " ${nor}Directory ${drk_grn}already ${nor}exist, moving on.\n"
	fi

	#copy files to proper directories:
	printf "\nCopying files to the ${cyn}${bin_folder} ${nor}directory:\n"
	brk=0
	for file in ${bin_files[@]} ; do
		if cmp --silent "${bin_folder}${file}" "${project_folder}${file}" ; then
			printf " ${nor}Both versions of ${yel}${file} ${nor}are the same, Skipping...\n"
		else
			cp ${project_folder}${file} ${bin_folder} && printf "${yel}${file} ${nor}copied." || break
		fi
	done

	printf "\nCopying files to the ${cyn}${lib_folder} ${nor}directory:\n"
	for file in ${lib_files[@]} ; do
		if cmp --silent "${lib_folder}${file}" "${project_folder}${file}" ; then
			printf " ${nor}Both versions of ${yel}${file} ${nor}are the same, Skipping...\n"
		else
			cp ${project_folder}${file} ${lib_folder} && printf "${yel}${file} ${nor}copied.\n" || break
		fi
	done

	printf "\nCopying files to the ${cyn}${etc_folder} ${nor}directory:\n"
	for file in ${etc_files[@]} ; do
		if cmp --silent "${etc_folder}${file}" "${project_folder}${file}" ; then
			printf " ${nor}Both versions of ${yel}${file} ${nor}are the same, Skipping...\n"
		else
			cp ${project_folder}${file} ${etc_folder} && printf "${yel}${file} ${nor}copied.\n" || break
		fi
	done

	printf "\nCopy service files to the ${cyn}${service_folder} ${nor}directory, then resetting copied services:\n"
	svc_count=0
	for file in ${service_files[@]} ; do
		if cmp --silent "${service_folder}${file}" "${project_folder}${file}" ; then
			printf " ${nor}Both versions of ${yel}${file} ${nor}are the same, Skipping...\n"
			let svc_count++
		else
			cp ${project_folder}${file} ${service_folder} && printf "${yel}${file} ${nor}copied.\n" || break
			systemctl disable ${file} && echo SUCCESS || break
			systemctl enable ${file} && echo SUCCESS || break
		fi
	done
	if [ $svc_count} == ${#base_service_files[@]} ] ; then
		systemctl daemon-reload && printf "${yel}systemctl daemon-reload${nor} was ${drk_grn}Successfull${nor}." || printf "${nor}systemctl daemon-reload was ${drk_red}not ${nor}successfull."
	fi

#refreshing .bashrc:
printf "\nAdding the ${yel}.bashrc${nor} addon (if it's already on, it will be removed and replaced):\n"
sed -i '/${begin_bashrc_addon_string}/Q' ${home}/.bashrc
cat bashrc_addendum.sh >> ${home}/.bashrc && printf " ${drk_grn}Done${nor}.\n" || printf " ${drk_grn}Failed${nor}.\n"

exit 0
