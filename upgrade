#!/bin/bash

#color and other formatting defenitions:
if [ -f /usr/local/lib/format.sh ]; then
	source /usr/local/lib/format.sh > /dev/null 2>&1
else
	printf "\nFormat library is not installed, continuing without!\n"
fi

#Location settings:
home="/home/${SUDO_USER}/"
etc_folder="/etc/"
lib_folder="/lib/"
boot="/boot/"
bt_folder="bluetooth/"
project_folder="${home}Projects/ser2bt-bridge/"
support_folder="${home}Projects/support/"
logging_folder="${home}console_logs/"
bin_folder="/usr/local/bin/"
main_lib_folder="/usr/local/lib/"
ser2bt_lib_folder="${main_lib_folder}ser2bt-bridge/"
etc_service_folder="${etc_folder}systemd/system/"
lib_service_folder="${lib_folder}systemd/system/"
serial_fix_folder="${etc_service_folder}getty@ttyGS0.service.d/"

#File list:
bt_service="bluetooth.service"
bt_config="main.conf"
boot_config="config.txt"
disable_svc=("keyboard-setup.service" "dphys-swapfile.service" "triggerhappy.service" \
"triggerhappy.socket" "apt-daily.service" "apt-daily.timer" \
"apt-daily-upgrade.service" "apt-daily-upgrade.timer" "rpi-eeprom-update.service" \
"ser2net.service")
base_bin_files=(ser2bt_bridge screen_bat_mon)
enhanc_bin_files=(ser2bt_status init_scr shutdown_scr)
full_bin_files=( "${base_bin_files[@]}" "${enhanc_bin_files[@]}" )
pisugar2_bin_files=(button_detect bat_mon)
ups_lite_bin_files=(bat_mon)
base_lib_files=(format.sh)
enhanc_lib_files=(logo.bmp)
full_lib_files=( "${base_lib_files[@]}" "${enhanc_lib_files[@]}" )
etc_files=(ser2bt_bridge.screenrc)
base_service_files=(rfcomm.service)
enhanc_service_files=(ser2bt-e-paper.service ser2bt-e-paper-init.service)
full_service_files=( "${base_service_files[@]}" "${enhanc_service_files[@]}" )
pisugar2_service_files=(ser2bt-button.service ser2bt-battery.service)
ups_lite_service_files=(ser2bt-battery.service)
enhanc_service_assoc=(ser2bt_status ser2bt-e-paper.service)
full_service_assoc=( "${enhanc_service_assoc[@]}" )
pisugar2_service_assoc=(button_detect ser2bt-button.service bat_mon ser2bt-battery.service)
ups_lite_service_assoc=(bat_mon ser2bt-battery.service)
removed_service_files=("ser2bt-e-paper-shut.service" "ser2bt_button.service" "ser2bt-bat.service")
begin_bashrc_addon_mark="#BEGIN ser2b-bridge .bashrc add-in"
end_bashrc_addon_mark="#END ser2b-bridge .bashrc add-in"
serial_fix_file="override.conf"
serial_fix_file_content="[Service]\nTTYReset=no\nTTYVHangup=no\nTTYVTDisallocate=no"
bt_service_pre_search="ExecStart=/usr/lib/bluetooth/bluetoothd"
bt_service_content="ExecStart=/usr/lib/bluetooth/bluetoothd -C --noplugin=sap\nExecStartPost=/usr/bin/sdptool add SP\nExecStartPost=/bin/hciconfig hci0 piscan"
base_config_txt_addons=("hdmi_blanking=" "disable_splash=" "boot_delay=" "dtparam=audio=" "enable_uart=" "gpu_mem=" "initial_turbo=" "dtoverlay=")
enhanc_config_txt_addons=("dtparam=i2c_arm=" "dtparam=spi=")
pisugar2_config_txt_addons=("dtoverlay=i2c-rtc,ds1307,addr=")
bt_config_change=("DiscoverableTimeout = " "PairableTimeout = ")
bt_config_search=("[01]" "[01]")
bt_config_value=(0 0)
full_config_txt_addons=("${base_config_txt_addons[@]}" "${enhanc_config_txt_addons[@]}")
base_config_txt_values=(2 1 0 "off" 1 32 60 "dwc2")
base_boot_search=("[0-9]" "[0-9]" "[0-9]" "[0-9]" "on" "[0-9]" "[0-9]\*" "[0-9]\*" "dwc2")
enhanc_config_txt_values=("on" "on")
enhanc_boot_search=("\(off\|on\)" "\(off\|on\)")
full_boot_search=("${base_boot_search[@]}" "${enhanc_boot_search[@]}")
pisugar2_config_txt_values=("0x32")
pisugar2_boot_search=("0x[0-9]\*")
full_config_txt_values=("${base_config_txt_values[@]}" "${enhanc_config_txt_values[@]}")
ups_type="N/A"

#Flags
bin_flag=0
serial_fix_flag=0
bt_fix_flag=0
svc_1_bin_flag=0
svc_3_bin_flag=0
svc_5_bin_flag=0

last_col=$(tput cols)

#Checks before begining:
# Make sure the script is run with superuser privelages
	##Check to make sure this is a rpi zero:
if  grep -q "Zero" /proc/device-tree/model; then
	#Starting script here:
	printf "\n\n${nor}Beginning ${upgrade_path} upgrade of ${yel}ser2bt-bridge${nor}:\n\n"
else
	printf "\n${nor}This is ${drk_red}not${nor} a ${yel}Raspberry Zero${nor}, ${drk_red}Aborting ${nor}installation/upgrade.\n" | fmt --goal=91 --width=${last_col}
	exit 1
fi
if [[ "${UID}" -ne 0 ]]; then
	printf "\n${nor}You do ${drk_red}not ${nor}have the permissions to successfully run this script.\n"
	exit 1
fi

#check for minimum arguements:
if [[ "${#}" -lt 1 ]]; then
	printf "${nor}Usage: sudo ${0} UPGRADE_OPTION [basic|battery|sceen|fukk].\n\n"
	printf "Upgrade ${yel}ser2bt-bridge${nor}, with the following options:\n"
	printf "\tbasic - Basic istallation of the serial to Bluetooth scripts.\n"
	printf "\tbattery -  Basic istallation of the serial to Bluetooth scripts, plus battery support.\n"
	printf "\tscreen -  Basic istallation of the serial to Bluetooth scripts, plus e-ink screen support.\n"
	printf "\tfull -  Basic istallation of the serial to Bluetooth scripts, plus e-ink screen and battery support.\n\n"
	exit 2
fi

#assign the upgrade path to the first argument
upgrade_path="${1}"
shift
if [ "${upgrade_path}" = "basic" ] ; then
	bin_files=( "${base_bin_files[@]}" )
	lib_files=( "${base_lib_files[@]}" )
	service_files=( "${base_service_files[@]}" )
	config_txt_addons=("${base_config_txt_addons[@]}")
	config_txt_values=("${base_config_txt_values[@]}")
	boot_search=(${base_boot_search[@]})
	ups_type="none"
fi

if [ "${upgrade_path}" = "enhanced" ] ; then
	bin_files=(${enhanc_bin_files[@]})
	lib_files=(${enhanc_lib_files[@]})
	service_files=(${enhanc_service_files[@]})
	service_assoc=(${enhanc_service_assoc[@]})
	config_txt_addons=(${enhanc_config_txt_addons[@]})
	config_txt_values=("${enhanc_config_txt_values[@]}")
	boot_search=(${enhanc_boot_search[@]})
fi

if [ "${upgrade_path}" = "full" ] ; then
	bin_files=(${full_bin_files[@]})
	lib_files=(${base_lib_files[@]})
	ser2bt_lib_files=(${enhanc_lib_files[@]})
	service_files=(${full_service_files[@]})
	service_assoc=(${full_service_assoc[@]})
	config_txt_addons=(${full_config_txt_addons[@]})
	config_txt_values=("${full_config_txt_values[@]}")
	boot_search=(${full_boot_search[@]})
fi

#If this is not a basic install, check to see which ups is installed.
if [ ${upgrade_path} != "basic" ] ; then
	result=$(i2cdetect -y 1 0x75 0x75 | grep -Eo "UU|75")
	if [ ${result} -eq 75 ] ;  then
		ups_type="pisugar2"
	else
		result=$(i2cdetect -y 1 0x36 0x36 | grep -Eo "UU|36")
		if [ ${result} -eq 36 ] ;  then
			ups_type="ups_lite"
		else
			ups_type="none"
		fi
	fi
fi
if [ "${ups_type}" = "pisugar2" ] && [ "${upgrade_path}" = "full" ] ; then
	config_txt_addons=("${full_config_txt_addons[@]}" "${pisugar2_config_txt_addons[@]}")
	config_txt_values=("${full_config_txt_values[@]}" "${pisugar2_config_txt_values[@]}")
	boot_search=("${enhanc_boot_search[@]}" "${pishugar2_boot_search[@]}")
	bin_files=("${full_bin_files[@]}" "${pisugar2_bin_files[@]}")
	service_files=("${full_service_files[@]}" "${pisugar2_service_files[@]}")
	service_assoc=("${full_service_assoc[@]}" "${pisugar2_service_assoc[@]}")
elif [ "${ups_type}" = "ups_lite" ] && [ "${upgrade_path}" = "full" ] ; then
	bin_files=("${full_bin_files[@]}" "${ups_lite_bin_files[@]}")
	service_files=("${full_service_files[@]}" "${ups_lite_service_files[@]}")
	service_assoc=("${full_service_assoc[@]}" "${ups_lite_service_assoc[@]}")
fi
#checking and adding modules as needed into /etc/modules:
printf "${nor}Check to make sure the the relavent modules are loaded:\n"
grep -q -s -o -e "^g_serial" ${etc_folder}modules && (printf " ${nor}module ${drk_grn}already${nor} loaded\n") || (sudo bash -c "echo 'g_serial' >> ${etc_folder}modules"; printf " ${nor}module ${drk_grn}successfully${nor} loaded\n")
grep -q -s -o -e "^dwc2" ${etc_folder}/modules && (printf " ${nor}module ${drk_grn}already${nor} loaded\n") || (sudo bash -c "echo 'dwc2' >> ${etc_folder}modules"; printf " ${nor}module ${drk_grn}successfully ${nor} loaded\n")

#checking and adding modules as needed into /boot/config.txt and /boot/cmdline.txt:
printf "\n${nor}Check to make sure the the relavent seetings are made in the boot files:${nor}\n" | fmt --goal=91 --width=${last_col}
change_flag=0
num=0
	for config in "${config_txt_addons[@]}"; do
		grep -q -s -x -E ^${config}${config_txt_values[num]} ${boot}${boot_config}
		if [ ${?} -eq 1 ]; then
			rem_config=$(grep -s -x -E ^#?${config}\(dwc2\|0x[a-z0-9]*\|[0-9]*\|on\|off\) ${boot}${boot_config})
			if [ ${?} -eq 0 ]; then
				printf " The configuration ${yel}${rem_config}${nor} will be replaced by ${yel}${config}${config_txt_values[num]}${nor}..."
				sed -i "s/^${rem_config}/${config}${config_txt_values[num]}/" ${boot}${boot_config} && printf ${drk_grn}"Good${nor}\n" || printf ${drk_red}"Bad${nor}\n"
				let change_flag++
			elif [ ${?} -eq 1 ]; then
				sed -i "$ a ${config}${config_txt_values[num]}" ${boot}${boot_config}
				printf " ${yel}${config}${config_txt_values[num]} ${nor}has been added to ${cyn}${boot}${boot_config}${nor}\n"
				let change_flag++
			fi
		fi
		let num++
	done
	if [ ${change_flag} -eq 0 ]; then
		printf " ${drk_grn}No changes were needed, continueing${nor}...\n"
	fi

#Check and edit bluetooth configuration file(s) as needed.
printf "\n${nor}Check to make sure the the relavent seetings are made in the ${blu}bluetooth${nor} configuration files:${nor}\n" | fmt --goal=91 --width=${last_col}
change_flag=0
num=0
	for config in "${bt_config_change[@]}"; do
#		echo ${config}${bt_config_value[num]}
#		echo ${etc_folder}${bt_folder}${bt_config}
		grep -q -s -x -E "^${config}${bt_config_value[num]}" ${etc_folder}${bt_folder}${bt_config}
		if [ ${?} -eq 1 ]; then
			rem_config=$(grep -s -x -E "^#?${config}${bt_config_search[num]}" ${etc_folder}${bt_folder}${bt_config})
			if [ ${?} -eq 0 ]; then
				printf " The configuration ${yel}${rem_config}${nor} will be replaced by ${yel}${config}${bt_config_value[num]}${nor}..."
				sed -i "s/^${rem_config}/${config}${bt_config_value[num]}/" ${etc_folder}${bt_folder}${bt_config} && printf ${drk_grn}"Good${nor}\n" || printf ${drk_red}"Bad${nor}\n"
				let change_flag++
			elif [ ${?} -eq 1 ]; then
				sed -i "$ a ${config}${bt_config_value[num]}" ${etc_folder}${bt_folder}${bt_config}
				printf " ${yel}${config}${bt_config_value[num]} ${nor}has been added to ${cyn}${etc_folder}${bt_folder}${yel}${bt_config}${nor}\n"
				let change_flag++
			fi

		fi
		let num++
	done
#Upgrade system files
#printf "\n${nor}Update package manager:\n"
#apt update > /dev/null 2>&1
#if [ ${?} -gt 0 ]; then
#	printf " ${red}Update failed, exiting to shell\n"
#	exit 1 #apt update or apt full-upgrade failed"
#else
#	printf " ${grn}Update completed...\n"
#
#fi
#apt full-upgrade -y > /dev/null 2>&1
#if [ ${?} -gt 0 ]; then
#	printf " ${red}Upgrade failed, exiting to shell\n"
#	exit 1 #apt update or apt full-upgrade failed"
#else
#	printf " ${grn}Upgrade completed...\n"
#fi

#make directorys:
#Make directory for serial port fix, then verify the config file is correct, if not, make corrections:
	official_s_ver=$(printf ${serial_fix_file_content})
	existing_s_ver=$(cat ${serial_fix_folder}${serial_fix_file})
	printf "\n${nor}Check if the ${cyn}${serial_fix_folder} ${nor}directory exists:\n"
	if [ ! -d ${serial_fix_folder} ]; then
		printf " ${nor}Directory does ${drk_red}not ${nor}exist, creating...\n"
		mkdir -p ${serial_fix_folder}
	else
		printf " ${nor}Directory ${drk_grn}already ${nor}exists, checking for ${cyn}${serial_fix_folder}${yel}${serial_fix_file}${nor}:\n"
		if [ ! -f ${serial_fix_folder}${serial_fix_file} ]; then
			printf " ${yel}${serial_fix_file}${nor}does ${drk_red}not${nor}exist, creating..."
			printf "${official_s_ver}" > "${serial_fix_folder}${serial_fix_file}" && printf " ${drk_grn}Done${nor}.\n" || printf " ${drk_grn}Failed${nor}.\n"
		else
			printf " ${yel}${serial_fix_file} ${drk_grn}does${nor} exist, checking if updates are needed:\n"
			if [ "${existing_s_ver}" != "${official_s_ver}" ]; then
				printf "  ${nor}There is a difference between what is supposed to be in the ${yel}fix${nor}, will clean and re-apply ${yel}fix${nor} related configurations:\n"
				printf "${official_s_ver}" > "${serial_fix_folder}${serial_fix_file}" && printf " ${drk_grn}Done${nor}.\n" || printf " ${drk_grn}Failed${nor}.\n"
				serial_fix_flag=1
			else
				printf "  ${nor}Both versions are the same, skipping...\n" | fmt --goal=91 --width=${last_col}
				serial_fix_flag=0
			fi
		fi
	fi

#Modify/Ammend the bluetooth/bluez service file:
printf "\n${blu}Bluetooth${nor} service configurations:\n" | fmt --goal=91 --width=${last_col}
if [ -f "${lib_service_folder}${bt_service}" ]; then
	existing_bt_chg=$(awk '/^ExecStart/,/piscan/ { print }' ${lib_service_folder}${bt_service})
	printf " ${blu}Bluetooth${nor} Service ${drk_grn}was${nor} found, checking content:\n"
	if grep -q -e "^${bt_service_pre_search}$" "${lib_service_folder}${bt_service}"; then
		printf "  ${blu}Bluetooth${nor} Service ${drk_yel}needs${nor} to be edited..."
		sed -i "s+${bt_service_pre_search}+${bt_service_content}+g" "${lib_service_folder}${bt_service}" && printf "${drk_grn}Done${nor}\n" || printf "\n"
		bt_fix_flag=1
	elif [[ $(printf "${existing_bt_chg}") == $(printf "${bt_service_content}") ]]; then
#grep -e "^${bt_service_content}$" "${lib_service_folder}${bt_service}"; then
		printf "  ${blu}Bluetooth${nor} Service does ${drk_grn}not need${nor} to be edited.\n" | fmt --goal=91 --width=${last_col}
		bt_fix_flag=0
	else
		printf "  ${drk_red}Error${nor} fatal error, unable to overcome problem in ${yel}${lib_service_folder}${bt_service}${nor}.  Please manually fix\n." | fmt --goal=91 --width=${last_col}
		bt_fix_flag=0
		exit 4
	fi
else
	printf " ${blu}Bluetooth${nor} Service could ${drk_red}not ${nor}be found, ${drk_red}Aborting${nor}.\n"
	bt_fix_flag=0
	exit 3
fi

#Disable Unneeded services:
printf "\nChecking for and disabling unneeded services:\n"
for file in "${disable_svc[@]}" ; do
	status=$(systemctl is-enabled "${file}" 2>/dev/null)
	if [ "${ups_type}" == "none" ] && [ "${file}" == "ser2net.service" ] && [ "${status}" == "disabled" ]; then
		printf " Status of ${yel}${file}${nor} is currently ${drk_red}${status}${nor}..."
		systemctl enable "${file}"  2>/dev/null && printf " ${drk_grn}Enabled${nor}.\n" || printf " ${drk_red}Failed to enable${nor}.\n"
	elif [ "${status}" != "disabled" ] && [ "${status}" != "static" ]; then
		printf " Status of ${yel}${file}${nor} is currently ${drk_red}${status}${nor}..."
		systemctl disable "${file}"  2>/dev/null && printf " ${drk_grn}Disabeled${nor}.\n" || printf " ${drk_red}Failed to disable${nor}.\n"
	else
		printf " Status of ${yel}${file}${nor} is currently ${drk_grn}${status}${nor}.\n"
	fi
done

#Build support folde(s) and copy files to them:
	printf "\n${nor}Check to make sure the ${cyn}${support_folder} ${nor}directories exist:\n"
	if [ ! -d ${support_folder} ]; then
		printf " ${nor}Directory does ${drk_red}not ${nor}exist, creating...\n"
		mkdir -p ${support_folder}
	else
		printf " ${nor}Directory ${drk_grn}already ${nor}exist, moving on.\n"
	fi

	printf "\n${nor}check to make sure the ${cyn}${logging_folder} ${nor}directories exist:\n"
	if [ ! -d ${logging_folder} ]; then
		printf " ${nor}Directory does ${drk_red}not ${nor}exist, creating...\n"
		mkdir -p ${logging_folder}
	else
		printf " ${nor}Directory ${drk_grn}already ${nor}exist, moving on.\n"
	fi

	printf "\n${nor}check to make sure the ${cyn}${ser2bt_lib_folder} ${nor}directories exist:\n"
	if [ ! -d ${ser2bt_lib_folder} ]; then
		printf " ${nor}Directory does ${drk_red}not ${nor}exist, creating...\n"
		mkdir -p ${ser2bt_lib_folder}
	else
		printf " ${nor}Directory ${drk_grn}already ${nor}exist, moving on.\n"
	fi

#copy files to proper directories:
	printf "\nCopying files to the ${cyn}${bin_folder} ${nor}directory:\n"
	for file in "${bin_files[@]}" ; do
		if cmp --silent "${bin_folder}${file}" "${project_folder}${file}" ; then
			printf " ${nor}Both versions of ${yel}${file} ${nor}are the same, Skipping...\n"
		else
			if [ "${file}" == "${service_assoc[0]}" ] ; then
				svc_1_bin_flag=1
				bin_flag=1
			fi
			if [ "${file}" == "${service_assoc[2]}" ] ; then
				svc_3_bin_flag=1
				bin_flag=1
			fi
			if [ "${file}" == "${service_assoc[4]}" ] ; then
				svc_5_bin_flag=1
				bin_flag=1
			fi
			cp ${project_folder}${file} ${bin_folder} && printf " ${yel}${file} ${nor}copied.\n" || break
		fi
	done

	printf "\nCopying files to the ${cyn}${main_lib_folder} ${nor}directory:\n"
	for file in "${lib_files[@]}" ; do
		if cmp --silent "${main_lib_folder}${file}" "${project_folder}${file}" ; then
			printf " ${nor}Both versions of ${yel}${file} ${nor}are the same, Skipping...\n"
		else
			cp ${project_folder}${file} ${main_lib_folder} && printf " ${yel}${file} ${nor}copied.\n" || break
		fi
	done

	printf "\nCopying files to the ${cyn}${ser2bt_lib_folder} ${nor}directory:\n"
	for file in "${ser2bt_lib_files[@]}" ; do
		if cmp --silent "${ser2bt_lib_folder}${file}" "${project_folder}${file}" ; then
			printf " ${nor}Both versions of ${yel}${file} ${nor}are the same, Skipping...\n"
		else
			cp ${project_folder}${file} ${ser2bt_lib_folder} && printf " ${yel}${file} ${nor}copied.\n" || break
		fi
	done

	printf "\nCopying files to the ${cyn}${etc_folder} ${nor}directory:\n"
	for file in "${etc_files[@]}" ; do
		if cmp --silent "${etc_folder}${file}" "${project_folder}${file}" ; then
			printf " ${nor}Both versions of ${yel}${file} ${nor}are the same, Skipping...\n"
		else
			cp ${project_folder}${file} ${etc_folder} && printf " ${yel}${file} ${nor}copied.\n" || break
		fi
	done

	printf "\nCopy service files to the ${cyn}${etc_service_folder} ${nor}directory, then disable and enable copied services:\n" | fmt --goal=91 --width=${last_col}
	svc_count=0
	for svc_file in ${service_files[@]} ; do
		if cmp --silent "${etc_service_folder}${svc_file}" "${project_folder}${svc_file}" ; then
			printf " ${nor}Both versions of ${yel}${svc_file} ${nor}are the same, Skipping...\n"
			let svc_count++
		else
			cp ${project_folder}${svc_file} ${etc_service_folder} && printf " ${yel}${svc_file} ${nor}copied.\n" || break
			systemctl disable ${svc_file} >  /dev/null 2>&1 && printf " ${nor}${svc_file} ${drk_grn}successfully ${nor}disabeled.\n" || break
			systemctl enable ${svc_file} > /dev/null 2>&1 && printf " ${nor}${svc_file} ${drk_grn}successfully ${nor}enabeled.\n" || break
		fi
	done

	#Disable and Remove un-needed services"
	printf "${nor}\nDisable, and remove any services that are no longer required${nor}\n"
	num=0
	for svc_file in ${removed_service_files[@]}; do
		if [ -f "${etc_service_folder}${svc_file}" ]; then
			systemctl disable ${svc_file} > /dev/null 2>&1 && printf " ${yel}${svc_file} ${drk_grn}successfully ${nor}disabeled.\n" || break
			rm ${etc_service_folder}${svc_file} && printf " ${yel}${svc_file} ${drk_grn}successfully ${nor}removed.\n" || break
		else
			let num++
		fi
	done
	if [[ ${#removed_service_files[@]} -eq ${num} ]]; then
		printf " ${drk_grn}No changes were needed, continuing${nor}...\n"
	fi

	#After all of the changes have been made, reload the systemd daemon:
	if [ "${svc_count}" != "${#service_files[@]}" ] || [[ "${bin_flag}" -gt 0 ]] ; then
		printf "\n${nor}Restarting systemctl (as needed):${nor}\n"
		systemctl daemon-reload && printf " ${yel}systemctl daemon-reload${nor} was ${drk_grn}Successfull${nor}.\n" || printf " ${nor}systemctl daemon-reload was ${drk_red}not ${nor}successfull.\n"
	fi

	#Action based on flags:
	if [[ "${bt_fix_flag}" -gt 0 ]] ; then
		printf "\n${nor}Disabeling, Enabeling and Starting ${bt_service}${nor}:\n"
		systemctl disable ${bt_service} > /dev/null 2>&1 && printf " ${nor}${bt_service} ${drk_grn}successfully ${nor}disabeled.\n" || printf " ${drk_red}Failed\n"
		systemctl enable ${bt_service} > /dev/null 2>&1 && printf " ${nor}${bt_service} ${drk_grn}successfully ${nor}enabled.\n" || printf " ${drk_red}Failed\n"
		systemctl start ${bt_service} > /dev/null 2>&1 && printf " ${nor}${bt_service} ${drk_grn}successfully ${nor}started.\n" ||  printf " ${drk_red}Failed\n"
		let svc_count++
	fi

	if [[ "${serial_fix_flag}" -gt 0 ]] ; then
		printf "\n${nor}Enabeling and starting getty@ttyGS0.service:${nor}\n"
		systemctl enable getty@ttyGS0.service > /dev/null 2>&1 && printf " ${nor}getty@ttyGS0.service ${drk_grn}successfully ${nor}enabled.\n" || break
		systemctl start getty@ttyGS0.service > /dev/null 2>&1 && printf " ${nor}getty@ttyGS0.service ${drk_grn}successfully ${nor}started.\n" || break
		let svc_count++
	fi
	svc_count=0
	if [ "${bin_flag}" -gt 0 ] ; then
		printf "\n${nor}Restarting services that are associated to running scripts:${nor}\n"
		if [ "${svc_1_bin_flag}" -eq 1 ] ; then
			systemctl restart "${service_assoc[1]}" && printf " ${nor}${service_assoc[1]} ${drk_grn}Successfully ${nor}Restarted.\n" || printf "${drk_red}Failed ${yellow}${svc_file}${nor}!\n"
			let svc_count++
		fi
		if [ "${svc_3_bin_flag}" -eq 1 ] ; then
			systemctl restart "${service_assoc[3]}" && printf " ${nor}${service_assoc[3]} ${drk_grn}Successfully ${nor}Restarted.\n" || printf "${drk_red}Failed ${yellow}${svc_file}${nor}!\n"
			let svc_count++
		fi
		if [ "${svc_5_bin_flag}" -eq 1 ] ; then
			systemctl restart "${service_assoc[5]}" && printf " ${nor}${service_assoc[5]} ${drk_grn}Successfully ${nor}Restarted.\n" || printf "${drk_red}Failed ${yellow}${svc_file}${nor}!\n"
			let svc_count++
		fi
	fi

#refreshing .bashrc:
	printf "\nAdding the ${yel}.bashrc${nor} addon (if it's already on, it will be removed and replaced):\n" | fmt --goal=91 --width=${last_col}
#First compare whats in bashrc matches the addendum:
	existing_ver=$(awk '/^#BEGIN/,/^#END/ { print }' ${home}.bashrc)
	official_ver=$(awk '/^#BEGIN/,/^#END/ { print }' ${project_folder}bashrc_addendum.sh)
	if [ "${existing_ver}" != "${official_ver}" ] ; then
		printf " ${nor}There is a difference between what is supposed to be in ${yel}.bashrc${nor}, will clean and re-apply ${yel}ser2bt-bridge${nor} related configurations:\n"  | fmt --goal=91 --width=${last_col}
		sed -i '/^#BEGIN ser2b-bridge .bashrc add-in/, /^#END ser2b-bridge .bashrc add-in/d' ${home}.bashrc
		cat bashrc_addendum.sh >> ${home}.bashrc && printf " ${drk_grn}Done${nor}.\n" || printf " ${drk_grn}Failed${nor}.\n"
	else
		printf " ${nor}Both versions are the same, skipping...\n"
	fi
exit 0
