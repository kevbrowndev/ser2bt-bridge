#!/bin/bash

#color and other formatting defenitions:
source /usr/local/lib/format.sh

#Location settings:
home="/home/${SUDO_USER}"
project_folder="${home}/Projects/ser2bt-bridge/"
support_folder="${home}/Projects/support/"
logging_folder="${home}/console_logs/"
bin_folder="/usr/local/bin/"
lib_folder="/usr/local/lib/"
etc_folder="/etc/"
service_folder="/etc/systemd/system/"
#File list:
base_bin_files=(ser2bt_bridge)
base_lib_files=(format.sh)
base_service_files=(rfcomm.service)
etc_files=(ser2bt_bridge.screenrc)

#Starting script here:
# Make sure the script is run with superuser privelages
if [[ ${UID} -ne 0 ]]; then
	printf "you do not have the permissions to successfully run this script.\n"
	exit 1
fi

#Upgrade system files
#printf "${white}Update package manager:\n"
#apt update > /dev/null 2>&1
#if [ ${?} -gt 0 ]; then
#	printf "${red}Update failed, exiting to shell\n"
#	exit 1 #apt update or apt full-upgrade failed"
#fi
#apt full-upgrade -y > /dev/null 2>&1
#if [ ${?} -gt 0 ]; then
#	printf "${red}Upgrade failed, exiting to shell\n"
#	exit 1 #apt update or apt full-upgrade failed"
#fi

#make directorys:
printf "check to make sure the Projects/support/ directories exist\n"
if [ ! -d ${support_folder} ]; then
	printf "directory does not exist, creating...\n"
	mkdir -p ${support_folder}
else
	printf "Directorys already exist, moving on.\n"
fi

printf "\ncheck to make sure the ${logging_folder} directories exist\n"
if [ ! -d ${logging_folder} ]; then
	printf "directory does not exist, creating...\n"
	mkdir -p ${logging_folder}
else
	printf "Directorys already exist, moving on.\n"
fi

#copy files to proper directories:
printf "Copy to bin directory\n"
brk=0
#while [ ${brk} -eq 0 ]; do
	for file in ${base_bin_files[@]} ; do
		cp ${projects_folder}${file} ${bin_folder} && echo SUCCESS || break
	done

	printf "Copy to lib directory\n"
	for file in ${base_lib_files[@]} ; do
		cp ${projects_folder}${file} ${lib_folder} && echo SUCCESS || break
	done

	printf "Copy configurations to etc directory\n"
	for file in ${base_etc_files[@]} ; do
		cp ${projects_folder}${file} ${etc_folder} && echo SUCCESS || break
	done

	printf "Copy services to service directory, then resetting the services.\n"
	for file in ${base_service_files[@]} ; do
		cp ${projects_folder}${file} ${service_folder} && echo SUCCESS || break
		systemctl disable ${file} && echo SUCCESS || break
		systemctl enable ${file} && echo SUCCESS || break
	done
	systemctl daemon-reload && echo SUCCESS || echo Failed
exit 0
