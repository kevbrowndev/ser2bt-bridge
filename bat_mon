#!/usr/bin/python3
# -*- coding:utf-8 -*-

#import modules
import os #hostname
import time #timers for sleep
import struct  # Capture battary capacity
import smbus #both waveshare and UPS-LITE
import syslog
#import signal # Check for incomming signals from the service and react if there is term signal.


#Declare Variables:
min_bat_cap=1  # setting in percent minimum battery capacity before we'll shutdown.
bus=1
i2c_bus=smbus.SMBus(bus)
bat_cap = min_bat_cap+1 #Define the initial battery capacity.


#Begin Function defenition:
######################################################################################################
#Capture the bus for ups board, both ups_lite, and pisugar2.
def init_ups_check(i2c_bus, bus):
    is_not_ups_lite = False
    is_not_pisugar = False
    try:
        smbus.SMBus(bus)  # 0 = /dev/i2c-0 (port I2C0), 1 = /dev/i2c-1 (port I2C1)
#Test to see which UPS solution is inatalled, if any:
        try:
            address = 0x75 # pisugar 2's battery is on 0x75
            low = i2c_bus.read_byte_data(address, 0xa2)
        except:
            is_not_pisugar = True
        try:
            address = 0x36 # ups_lite's address is on 0x36
            value = i2c_bus.read_word_data(address, 4)
            swapped = struct.unpack("<H", struct.pack(">H", value))[0]
            battery_level = swapped/256
        except:
            is_not_ups_lite = True
            if is_not_ups_lite is True and is_not_pisugar is True:
                ups_type = 'none'
                address = 'error'
            elif is_not_ups_lite is True and is_not_pisugar is False:
                ups_type = 'pisugar2'
                address = 0x75 #making sure the correct address is set.
            elif is_not_ups_lite is False and is_not_pisugar is True:
                ups_type = 'ups_lite'
                address = 0x36 #Making sure the correct address is set.
            syslog.syslog(syslog.LOG_INFO, 'Found and selected the '+ups_type+' UPS option.')
    except:
        bus="error"
        syslog.syslog(syslog.LOG_INFO, 'Did not find a UPS option.')

    return ups_type, address


def read_bat_capacity(ups_type, address, bus):
    # "This function returns as a float the remaining capacity of the battery
    # connected to the Raspi UPS Hat via the pro$
    battery_curve = [
        [4.16, 5.5, 100, 100],
        [4.05, 4.16, 87.5, 100],
        [4.00, 4.05, 75, 87.5],
        [3.92, 4.00, 62.5, 75],
        [3.86, 3.92, 50, 62.5],
        [3.79, 3.86, 37.5, 50],
        [3.66, 3.79, 25, 37.5],
        [3.52, 3.66, 12.5, 25],
        [3.49, 3.52, 6.2, 12.5],
        [3.1, 3.49, 0, 6.2],
        [0, 3.1, 0, 0],
    ]
    battery_level = 0
    charge = False

    if ups_type == 'ups_lite':
        charge = False
        try:
            read = bus.read_word_data(address, 4)
            swapped = struct.unpack("<H", struct.pack(">H", read))[0]
            battery_level = swapped/256
        except:
            battery_level = 200.00
    elif ups_type == 'pisugar2':
        try:
            low = bus.read_byte_data(address, 0xa2)
            high = bus.read_byte_data(address, 0xa3)
            if high & 0x20:
                low = ~low & 0xff
                high = ~high & 0x1f
                v = (((high | 0b1100_0000) << 8) + low)
                battery_v = (2600.0 - v * 0.26855) / 1000
            else:
                v = ((high & 0x1f) << 8 ) + low
                battery_v = (2600 + v * 0.26855) / 1000
        except:
            battery_v = 0.0
        for range in battery_curve:
            if range[0] < battery_v <= range[1]:
                level_base = ((battery_v - range[0]) / (range[1] - range[0])) * (range[3] - range[2])
                battery_level = level_base + range[2]
    else:
        battery_level = 200.00
        charge = False
    return [int(battery_level), charge]
#End of Function defenition:
######################################################################################################


#determine UPS type, bus number, and if its charging or not:
ups, address = init_ups_check(i2c_bus, bus)

try:
    while (bat_cap > min_bat_cap or charge is True):
        bat_cap, charge = read_bat_capacity(ups, address, i2c_bus) #Formatted battery level
        bat_lvl=str(bat_cap)+"%"
        fb = open('/tmp/bat','w')
        fb.write(str(bat_lvl))
        fb.close()
        time.sleep(60)

    #if the bat_cap is less that min_bat_cap, then bail out of the loop, and follow the remaining code to shutdown.
    os.system("sudo poweroff -p")
    syslog.syslog(syslog.LOG_INFO, 'Shutting down - battary has reached critical level')
    syslog.syslog(syslog.LOG_INFO, 'Battary is: '+bat_lvl+'%')
    fb.close()
    exit(0)

except KeyboardInterrupt:
    syslog.syslog(syslog.LOG_INFO, 'Quit (SIGINT) Due to Keyboard interrupt when not being run as a service')
    fb.close()
    exit()

except SystemExit:
   syslog.syslog(syslog.LOG_INFO, 'Quit (SIGTERM) from service telling us to terminate')
   syslog.syslog(syslog.LOG_INFO, 'Shutting Down/Restarting service - interupted by service stop, from command, shutdown, or reboot')
   fb.close()
   exit()

except IOError as e:
   syslog.syslog(syslog.LOG_ERR, 'Shutting Down ser2bt_status - traceback.format_exc():\n%s' ,traceback.format_exc())
   fb.close()
   exit()